openapi: 3.0.3
info:
  title: Library API
  version: 1.2.0
  description: STD22105
servers:
  - url: https://library.com
paths:
  /books:
    get:
      tags:
        - book
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        #TODO3: add parameter to filter books by intervals of dates of the releaseDate  
        - in: query
          name: filter
          schema: 
             properties:
               startDate:
                 type: string
                 format: date
               endDate:
                 type: string
                 format: date  
        - $ref: '#/components/parameters/queryPage'
        - $ref: '#/components/parameters/queryPageSize'
      responses:
        '200':
          description: The list of filtered books
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
        - book
      summary: Create or update a list of books with author
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook'

      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors/{page}/{pageSize}:
   get:
      tags:
        - Authors
      summary: Get all authors
      operationId: getAuthors
      parameters:
        - $ref: '#/components/parameters/pathPage'
        - $ref: '#/components/parameters/pathPageSize'
      responses:
        200:
          description:  get author
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author'
  /authors:
  #TODO2: complete GET (can be filtered by name) - PUT - DELETE
   get:
      tags:
        - Authors
      summary: Get all authors
      operationId: getAuthors
      parameters:
        - in: path
          name: authorName
          required: true
          schema:
            type: string
      responses:
        200:
          description:  get author
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author'
 
   put:
      tags:
        - Authors
      summary: Update authors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/author'
      responses:
        200:
          description: The list of created or updated author
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author'
   delete:
      tags:
        - Authors
      summary: delete author
      description: delete all author
      responses:
        "200":
          description: all  deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/author"
            application/xml:
              schema:
                $ref: "#/components/schemas/author"
  /book/{bookId}/author/{authorId}:
    put:
      tags:
        - book
      summary: Associate  a single book to one author
      operationId: Associate
      parameters:
        - name: bookId
          in: path
          schema:
            type: string
          required: true
        - name: authorId
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description:  list of updated book with author
          content:
            application/json:
             schema:
               $ref: "#/components/schemas/Book"
            application/xml:
             schema:
               $ref: "#/components/schemas/Book"
  /book/author:
    put:
      tags:
        - book
      summary: update the author of the book
      operationId: updateBookAuthor
      requestBody:
        required: true
        content:
           application/json:
              schema:
                type: array
                items:
                 $ref: "#/components/schemas/updateBookAuthor"
      responses:
        "200":
            description: updated book with author          
            content:
             application/json:
              schema:
               $ref: "#/components/schemas/updateBookAuthor"
             application/xml:
              schema:
               $ref: "#/components/schemas/updateBookAuthor"
  /topic:
    get:
      tags:
        - topic
      summary: get all topic
      operationId: getTopic             
      parameters:
        - in: query
          name: topicName
          required: false
          schema:
            type: string
        - in: query
          name: page
          description: page number (default 1)
          required: false
          schema: 
             type: integer
             default: 1   
        - in: query
          name: pageSize
          description: size of the page (default 50)
          required: false
          schema: 
             type: integer
             default: 50   
      responses:
        "200":
            description: list of topic
            content:
              application/json:
                 schema:
                   $ref: "#/components/schemas/topic"
    put:
      tags:
        - topic
      summary: create or update topic
      operationId: updateTopic
      requestBody:
         content:
           application/json:
            schema:
             type: array
             items:
               $ref: "#/components/schemas/topic"
      responses:
       "200":
          description: list of created or updated topic      
          content:
            application/json:
                schema:   
                  $ref: "#/components/schemas/topic"
    delete:
      tags:
        - topic
      summary: delete author
      description: delete a author
      parameters:
        - in: path
          name: topicName
          required: true
          schema:
            type: string
      responses:
        "200":
          description: topic deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/topic"
            application/xml:
              schema:
                $ref: "#/components/schemas/topic"
  /book/{bookId}/topic/{topicId}:
    put:
      tags:
        - book
      summary: associate a book with a topic
      operationId: associateBookTopic
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: string
        - in: path
          name: topicId
          required: true
          schema:
            type: string
      responses:
        "200":
           description: list of updated book with topic
           content:
             application/json:
               schema: 
                 $ref: "#/components/schemas/CrupdateBook"   
  /book/topic:
    put:
      tags:
        - book
      summary: update the topic of the book
      operationId: updateTopicBook    
      requestBody:
        required: true
        content:
           application/json:
              schema:
                type: array
                items:
                 $ref: "#/components/schemas/updateTopicBook"
      responses:
        "200":
            description: updated book with author          
            content:
             application/json:
              schema:
               $ref: "#/components/schemas/updateTopicBook"
             application/xml:
              schema:
               $ref: "#/components/schemas/updateTopicBook"        
  /author/topic:
      get: 
        tags:
          - Authors
        summary: Associate author to a topic
        operationId: associateAuthorTopic
        parameters:
          - in: query
            name: authorName 
            schema: 
               type: string
            required: false   
        responses:
          "200":
             description: get author and his topic 
             content:
               application/json:
                 schema: 
                   $ref: '#/components/schemas/authorWithTopic'  
components:
  schemas:
    CrupdateBook:
       type: object
       properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          items:
            $ref: '#/components/schemas/topic'
        releaseDate:
          type: string
          format: date
    Book:
      allOf:
        - $ref: '#/components/schemas/CrupdateBook'
      type: object
      properties:
        author:
          #TODO1: set it as a component with properties : id, name, sex (M or F)
          items: 
            $ref: '#/components/schemas/author'
    author:
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          type: string 
          enum:
            - M
            - F          
    updateBookAuthor:
      type: object
      properties:
        bookId:
          type: integer
        authorId:
          type: integer
    updateTopicBook:
      type: object
      properties:
        bookId:
          type: integer
        topicId:
          type: integer
    bookWithTopic:
      allOf:
        - $ref:  '#/components/schemas/CrupdateBook'
      type: object
      properties:
        topic: 
           items:
             $ref: '#/components/schemas/topic'        
    topic:
      type: object
      properties:
        id:
         type: integer
        topicName:
         enum:
          - ROMANCE
          - COMEDY
          - OTHER
    authorWithTopic:
      type: object
      properties:
        author: 
          items:
           $ref: '#/components/schemas/author'
        topic: 
          items:
           $ref: '#/components/schemas/topic'  
    responses:
        type: object
        properties:
          status:
            type: object
            properties:
               code:
                 type: integer
               message: 
                 type: string
          body: 
            type: object                
    200:  
     allOf:
       - $ref: "#/components/schemas/responses"   
     description: success
          
    400:  
     allOf:
       - $ref: "#/components/schemas/responses"
     description: client error

    403:
     allOf:
      - $ref: "#/components/schemas/responses"
     description: forbidden access

    500:  
     allOf:
      - $ref: "#/components/schemas/responses"
     description: server error 
  parameters:
    queryPage:
        in: query
        name: page
        description: page number (default 1)
        required: false
        schema:
          type: integer
          default: 1         
    queryPageSize:
        in: query
        name: pageSize
        description: size of the page (default 50)
        required: false
        schema:
          type: integer
          default: 50         
    pathPage:
        in: path
        name: page
        description: page number (default 1)
        required: true
        schema:
          type: integer
          default: 1         
    pathPageSize:
        in: query
        name: pageSize
        description: size of the page (default 50)
        required: true
        schema:
          type: integer
          default: 50         
   
               