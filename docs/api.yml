openapi: 3.0.3
info:
  title: Library API
  version: 1.2.0
  description: STD22107
servers:
  - url: https://library.com
security:
  - oauth2:
      - admin
      - visitor  
paths:
  /books:
    get:
      tags:
        - book
      summary: Get all books
      security:
        - oauth2: [admin, visitor]
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: filter
          schema: 
             properties:
               startDate:
                 type: string
                 format: date
               endDate:
                 type: string
                 format: date  
        - $ref: '#/components/parameters/queryPage'
        - $ref: '#/components/parameters/queryPageSize'
      responses:
        200:
           $ref: '#/components/responses/200'
        400:
           $ref: '#/components/responses/400'
        403:
           $ref: '#/components/responses/403'
        500:
           $ref: '#/components/responses/500'
    put:
      tags:
        - book
      summary: Create or update a list of books with author
      security:
        - oauth2: [admin]
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook'

      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /books/import:
   post: 
      tags:
       - book
      summary: import books
      security:
        - oauth2: [admin]
      operationId: importBooks
      requestBody:
        required: true 
        content:
          application/json:
           schema:
            oneOf:
              -  $ref: "#/components/schemas/importBook"   
              -  $ref: "#/components/schemas/importBookExcel"

      responses:
        200: 
          description:  the list of imported books
          content:
            application/json:
               schema: 
                 type: array
                 items:
                   $ref: "#/components/schemas/importBook"  

  /author/import:
   post: 
      tags:
       - Authors
      summary: import authors
      security:
        - oauth2: [admin]
      operationId: importAuthors
      requestBody:
        required: true 
        content:
          application/json:
           schema:
            oneOf:
              -  $ref: "#/components/schemas/importAuthor"   
              -  $ref: "#/components/schemas/importAuthorExcel"

      responses:
        200: 
          description:  the list of imported Authors
          content:
            application/json:
               schema: 
                 type: array
                 items:
                   $ref: "#/components/schemas/importAuthor"  

  /authors/{page}/{pageSize}:
   get:
      tags:
        - Authors
      summary: Get all authors
      operationId: getAuthors
      parameters:
        - $ref: '#/components/parameters/pathPage'
        - $ref: '#/components/parameters/pathPageSize'
      responses:
        200:
          description:  get author
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author'
  /authors:
   get:
      tags:
        - Authors
      summary: Get all authors
      security:
        - oauth2: [admin, visitor]
      operationId: getAuthors
      parameters:
        - in: path
          name: authorName
          required: true
          schema:
            type: string
      responses:
        200:
          description:  get author
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author'
 
   put:
      tags:
        - Authors
      summary: Update authors
      security:
        - oauth2: [admin]
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/author'
      responses:
        200:
          description: The list of created or updated author
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author'
   delete:
      tags:
        - Authors
      summary: delete author
      description: delete all author
      responses:
        "200":
          description: all  deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/author"
            application/xml:
              schema:
                $ref: "#/components/schemas/author"

  /book/{bookId}/author/{authorId}:
    put:
      tags:
        - book
      summary: Associate  a single book to one author
      security:
        - oauth2: [admin]
      operationId: Associate
      parameters:
        - name: bookId
          in: path
          schema:
            type: string
          required: true
        - name: authorId
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description:  list of updated book with author
          content:
            application/json:
             schema:
               $ref: "#/components/schemas/Book"
            application/xml:
             schema:
               $ref: "#/components/schemas/Book"

  /book/author:
    put:
      tags:
        - book
      summary: update the author of the book
      security:
        - oauth2: [admin]
      operationId: updateBookAuthor
      requestBody:
        required: true
        content:
           application/json:
              schema:
                type: array
                items:
                 $ref: "#/components/schemas/updateBookAuthor"
      responses:
        "200":
            description: updated book with author          
            content:
             application/json:
              schema:
               $ref: "#/components/schemas/updateBookAuthor"
             application/xml:
              schema:
               $ref: "#/components/schemas/updateBookAuthor"

  /topic:
    get:
      tags:
        - topic
      summary: get all topic
      operationId: getTopic             
      parameters:
        - in: query
          name: topicName
          required: false
          schema:
            type: string
        - in: query
          name: page
          description: page number (default 1)
          required: false
          schema: 
             type: integer
             default: 1   
        - in: query
          name: pageSize
          description: size of the page (default 50)
          required: false
          schema: 
             type: integer
             default: 50   
      responses:
        "200":
            description: list of topic
            content:
              application/json:
                 schema:
                   $ref: "#/components/schemas/topic"
    put:
      tags:
        - topic
      summary: create or update topic
      operationId: updateTopic
      requestBody:
         content:
           application/json:
            schema:
             type: array
             items:
               $ref: "#/components/schemas/topic"
      responses:
       "200":
          description: list of created or updated topic      
          content:
            application/json:
                schema:   
                  $ref: "#/components/schemas/topic"
    delete:
      tags:
        - topic
      summary: delete author
      description: delete a author
      parameters:
        - in: path
          name: topicName
          required: true
          schema:
            type: string
      responses:
        "200":
          description: topic deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/topic"
            application/xml:
              schema:
                $ref: "#/components/schemas/topic"

  /book/{bookId}/topic/{topicId}:
    put:
      tags:
        - book
      summary: associate a book with a topic
      security:
        - oauth2: [admin]
      operationId: associateBookTopic
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: string
        - in: path
          name: topicId
          required: true
          schema:
            type: string
      responses:
        "200":
           description: list of updated book with topic
           content:
             application/json:
               schema: 
                 $ref: "#/components/schemas/CrupdateBook"  

  /book/topic:
    put:
      tags:
        - book
      summary: update the topic of the book
      operationId: updateTopicBook    
      requestBody:
        required: true
        content:
           application/json:
              schema:
                type: array
                items:
                 $ref: "#/components/schemas/updateTopicBook"
      responses:
        "200":
            description: updated book with author          
            content:
             application/json:
              schema:
               $ref: "#/components/schemas/updateTopicBook"
             application/xml:
              schema:
               $ref: "#/components/schemas/updateTopicBook"        

  /author/topic:
      get: 
        tags:
          - Authors
        summary: Associate author to a topic
        operationId: associateAuthorTopic
        parameters:
          - in: query
            name: authorName 
            schema: 
               type: string
            required: false   
        responses:
          "200":
             description: get author and his topic 
             content:
               application/json:
                 schema: 
                   $ref: '#/components/schemas/authorWithTopic'  

  /book/lendedBook/{customerId}:
      get:
        tags:
          - book
        summary: get the lended book by customerId
        operationId: getBookLended
        parameters:
          - in: path
            name: customerId
            schema: 
              type: string
            required: true
          - in: query
            name: period
            schema:
              properties:
                startDate:
                   type: string
                   format: date
                endDate: 
                   type: string
                   format: date
        responses:
          200:
            description: book lended
            content:
               application/json:
                  schema:
                    $ref: '#/components/schemas/CrupdateBook'
  /book/renderedBook/{customerId}:
      get:
        tags:
          - book
        summary: get the rendered book by customerId
        operationId: getBookRendered
        parameters:
          - in: path
            name: customerId
            schema: 
              type: string
            required: true
          - in: query
            name: period
            schema:
              properties:
                startDate:
                   type: string
                   format: date
                endDate: 
                   type: string
                   format: date
        responses:
          200:
            description: book rendered
            content:
               application/json:
                  schema:
                    $ref: '#/components/schemas/CrupdateBook'

  /book/availableBook:
      get:
        tags:
          - book
        summary: get the list of available book
        operationId: getAvailableBook
        responses:
            200: 
              description: list of available book
              content:
                 application/json:
                   schema:
                     $ref: '#/components/schemas/CrupdateBook'          
  /customer/lendBook:
      post:
        tags:
          - customer
        summary: lend book
        security:
        - oauth2: [admin]
        operationId: lendBooks
        requestBody:
           content:
             application/json:
              schema:
                $ref: '#/components/schemas/bookCustomer'
        responses:
          200:
            description: book lended
            content:
               application/json:
                  schema:
                    $ref: '#/components/schemas/bookCustomer'
  /customer/renderBook:
      post:
        tags:
          - customer
        summary: render book
        security:
        - oauth2: [admin]
        operationId: renderBooks
        requestBody:
           content:
             application/json:
              schema:
                $ref: '#/components/schemas/bookCustomer'
        responses:
          200:
            description: book lended
            content:
               application/json:
                  schema:
                    $ref: '#/components/schemas/bookCustomer'
components:


  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            admin: Access to admin operations
            visitor: Access to visitor operations


  responses:
    200:
      description: list of books
      content:
        application/json: 
           schema:
             $ref: '#/components/schemas/bookBody'
    400:
      description: bad request
      content:
        application/json: 
           schema:
             $ref: '#/components/schemas/badRequest'
    403:
      description: forbidden
      content:
        application/json:
           schema:
             $ref: '#/components/schemas/forbidden'
    500:
      description: internal server error
      content:
        application/json:
           schema:
             $ref: '#/components/schemas/serverError'
  schemas:


    customer:
      type: object
      properties:
        customerId:
          type: integer
        customerName:
          type: string
        customerReference:
          type: string      

    bookCustomer:
      allOf:
        - $ref: '#/components/schemas/CrupdateBook'
        - $ref: '#/components/schemas/customer'
    responseStatus:
       type: object
       properties:
        schema:
          type: object
          properties: 
            status:
              type: object
              properties:
                code:
                  type: integer
                message: 
                  type: string       
    responseBodyTemplate:
       type: object
       properties:
         status: 
            $ref: "#/components/schemas/responseStatus"   
         body: 
            type: object   
    bookBody:
       allOf:
         - $ref: '#/components/schemas/responseBodyTemplate'
         - properties:
              body:
                 type: array
                 items: 
                   $ref: '#/components/schemas/Book'
    badRequest:
       allOf:
         - $ref: '#/components/schemas/responseBodyTemplate'
       example:
         status:
           code: 400
           message: bad request
         body: {}
    forbidden:
       allOf:
         - $ref: '#/components/schemas/responseBodyTemplate'
       example:
         status:
           code: 403
           message: forbidden
         body: {}
    serverError:
       allOf:
         - $ref: '#/components/schemas/responseBodyTemplate'
       example:
         status:
           code: 500
           message: internal server error
         body: {}

    CrupdateBook:
       type: object
       properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          items:
            $ref: '#/components/schemas/topic'
        releaseDate:
          type: string
          format: date

    Book:
      allOf:
        - $ref: '#/components/schemas/CrupdateBook'
      type: object
      properties:
        author:
          items: 
            $ref: '#/components/schemas/author'

    author:
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          type: string 
          enum:
            - M
            - F          

    updateBookAuthor:
      type: object
      properties:
        bookId:
          type: integer
        authorId:
          type: integer

    updateTopicBook:
      type: object
      properties:
        bookId:
          type: integer
        topicId:
          type: integer

    bookWithTopic:
      allOf:
        - $ref:  '#/components/schemas/CrupdateBook'
      type: object
      properties:
        topic: 
           items:
             $ref: '#/components/schemas/topic'        

    topic:
      type: object
      properties:
        id:
         type: integer
        topicName:
         enum:
          - ROMANCE
          - COMEDY
          - OTHER

    authorWithTopic:
      type: object
      properties:
        author: 
          items:
           $ref: '#/components/schemas/author'
        topic: 
          items:
           $ref: '#/components/schemas/topic'  

    importBook: 
      allOf:
        - $ref: "#/components/schemas/CrupdateBook"
      type:  object
      properties:
         idAuthor:
          type: integer
         authorName:
          type: string

    importBookExcel:
       type: object
       properties:
         bookExcel: 
            type: string

    importAuthor:
      type: object
      properties:
        authorName:
          type: string
        sex: 
          type: string
          enum: 
            - M
            - F

    importAuthorExcel:
      type: object
      properties:
        authorExcel: 
          type: string

  parameters:
    queryPage:
        in: query
        name: page
        description: page number (default 1)
        required: false
        schema:
          type: integer
          default: 1         
    queryPageSize:
        in: query
        name: pageSize
        description: size of the page (default 50)
        required: false
        schema:
          type: integer
          default: 50         
    pathPage:
        in: path
        name: page
        description: page number (default 1)
        required: true
        schema:
          type: integer
          default: 1         
    pathPageSize:
        in: query
        name: pageSize
        description: size of the page (default 50)
        required: true
        schema:
          type: integer
          default: 50              